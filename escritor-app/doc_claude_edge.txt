
Esse e uma aplicao que ajuda o escritor a escrever livros, pondendo slavar onde parou, o cpitulo, ao lado da escrita tem vario recursos como para ter uma escrita mas critiva, aoto complete, sugestoes e muito mais, tem um botao pra baixar, um editor de texto bem egal, e coisas e ferramntas de escritas como contador de alavras, tempo escrevendo, compimentos que usa o pc do usuario e diz, bom dia, ate tarde, ect..., as coisas sao feita no supabase e o claude ja e equipado com ebebddings e pode ter todo o contexto do livro salvo no supabase, e outrras ferrmantas incriveis que ajudam sempre escrever mais ter criatividade e tambem gerar imagens sugestos e muitos mais




Documentação: Edge Function Claude + Embeddings
Esta edge function integra o Claude AI com seu sistema de embeddings Supabase, fornecendo várias funcionalidades para assistência na escrita e criação de conteúdo.
Modos Disponíveis
1. Autocompletar (autocomplete)
Fornece sugestões de continuação de texto enquanto o usuário escreve, usando embeddings para contextualização.
Parâmetros:
json{
  "mode": "autocomplete",
  "input": "O texto atual do usuário...",
  "context": {
    "cursor_position": 150,
    "max_suggestions": 3,
    "user_id": 123,
    "livro_id": 456
  }
}
Resposta:
json{
  "input_text": "O texto atual do usuário...",
  "cursor_position": 150,
  "suggestions": [
    "continuação sugerida 1",
    "continuação sugerida 2",
    "continuação sugerida 3"
  ]
}
2. Geração de Página (generate_page)
Gera uma página completa baseada em uma descrição, mantendo consistência com o conteúdo existente.
Parâmetros:
json{
  "mode": "generate_page",
  "input": "Descrição do que deve estar na página...",
  "context": {
    "style": "informative",
    "livro_id": 456,
    "capitulo_id": 789,
    "page_length": "medium"
  }
}
Resposta:
json{
  "prompt": "Descrição do que deve estar na página...",
  "style": "informative",
  "page_length": "medium",
  "content": "Conteúdo gerado da página..."
}
3. Assistente de Escrita (writing_assistant)
Aprimora, edita e fornece feedback sobre trechos de texto.
Parâmetros:
json{
  "mode": "writing_assistant",
  "input": "Texto a ser aprimorado...",
  "context": {
    "action": "improve",
    "focus_areas": ["clarity", "engagement"],
    "livro_id": 456,
    "capitulo_id": 789
  }
}
Resposta:
json{
  "original_text": "Texto a ser aprimorado...",
  "action": "improve",
  "focus_areas": ["clarity", "engagement"],
  "revised_text": "Texto aprimorado com comentários..."
}
4. Ideias Criativas (creative_ideas)
Gera ideias criativas para desenvolvimento de histórias, personagens, cenários, etc.
Parâmetros:
json{
  "mode": "creative_ideas",
  "input": "Descrição do contexto atual...",
  "context": {
    "idea_type": "plot_points",
    "num_ideas": 3,
    "livro_id": 456,
    "capitulo_id": 789
  }
}
Resposta:
json{
  "prompt": "Descrição do contexto atual...",
  "idea_type": "plot_points",
  "num_ideas": 3,
  "ideas": "Ideias criativas formatadas..."
}
5. Busca (search)
Busca informações relevantes nos embeddings e fornece análise contextualizada.
Parâmetros:
json{
  "mode": "search",
  "input": "O que estou procurando...",
  "context": {
    "detail_level": "medium",
    "max_results": 5
  }
}
Resposta:
json{
  "query": "O que estou procurando...",
  "detail_level": "medium",
  "raw_results": [
    {
      "id": 123,
      "tipo": "capitulo",
      "conteudo": "Conteúdo encontrado...",
      "similaridade": 0.87
    }
  ],
  "analysis": "Análise dos resultados..."
}
6. Personalizado (custom)
Modo flexível que permite criar interações personalizadas com o Claude, com opção de incluir contexto de embeddings.
Parâmetros:
json{
  "mode": "custom",
  "input": "Prompt personalizado...",
  "context": {
    "system_prompt": "Comportamento personalizado do assistente...",
    "include_embeddings": true,
    "max_embeddings": 3,
    "embedding_filter": "livro"
  }
}


Dicas de Implementação

Autocomplete em Tempo Real: Implemente debounce para evitar chamadas excessivas durante a digitação.
Busca com Visualização: Use os resultados brutos de busca para criar uma visualização que permita ao usuário navegar pelos trechos relevantes do livro.
Geração Progressiva: Para geração de conteúdo longo, considere mostrar o resultado à medida que o Claude responde, usando streaming.
Personalização de Prompt: No modo custom, permita que usuários avançados criem e salvem seus próprios prompts para tarefas específicas.
Cache de Embeddings: Para consultas frequentes, considere implementar um sistema de cache para reduzir chamadas à API.

Essa edge function fornece uma base sólida e modular que pode ser expandida conforme as necessidades do seu projeto crescem.


tabela do supabae:

create table public."Livros" (
  id bigint generated by default as identity not null,
  created_at timestamp with time zone not null default now(),
  "Nome do livro" text null,
  "Autor" text null,
  email_user text null,
  constraint livros_pkey primary key (id)
) TABLESPACE pg_default;

create trigger after_livro_insert
after INSERT on "Livros" for EACH row
execute FUNCTION trigger_livro_embedding ();


create table public."Embeddings" (
  id bigint generated by default as identity not null,
  created_at timestamp with time zone not null default now(),
  content text not null,
  embedding public.vector not null,
  origem_id bigint not null,
  tipo_origem text not null,
  constraint embeddings_pkey primary key (id)
) TABLESPACE pg_default;

create index IF not exists embeddings_vector_idx on public."Embeddings" using ivfflat (embedding vector_cosine_ops)
with
  (lists = '100') TABLESPACE pg_default;

  create table public."Capitulo" (
  id bigint generated by default as identity not null,
  created_at timestamp with time zone not null default now(),
  texto text null,
  livro_id bigint not null,
  titulo text null,
  constraint capitulo_pkey primary key (id),
  constraint fk_capitulo_livro foreign KEY (livro_id) references "Livros" (id) on delete CASCADE
) TABLESPACE pg_default;

create trigger after_capitulo_insert
after INSERT on "Capitulo" for EACH row
execute FUNCTION trigger_capitulo_embedding ();

edge functions para gerar imagem:
import { createClient } from '@supabase/supabase-js'
const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_ANON_KEY)
const { data, error } = await supabase.functions.invoke('gerar_imagem', {
  body: {"prompt": "A children's book drawing of a veterinarian using a stethoscope to listen to the heartbeat of a baby otter."},
})
restorno: {
  "success": true,
  "image_url": "https://oaidalleapiprodscus.blob.core.windows.net/private/org-24x7NY2scYXh9BTHyqzk12Ua/user-qwqZGyHdh18yUKXm5M9D0kTY/img-Xf88i6C4XHXiEiEaFhCq6iiN.png?st=2025-05-09T01%3A58%3A02Z&se=2025-05-09T03%3A58%3A02Z&sp=r&sv=2024-08-04&sr=b&rscd=inline&rsct=image/png&skoid=8b33a531-2df9-46a3-bc02-d4b1430a422c&sktid=a48cca56-e6da-484e-a814-9c849652bcb3&skt=2025-05-08T22%3A53%3A17Z&ske=2025-05-09T22%3A53%3A17Z&sks=b&skv=2024-08-04&sig=I6dOc67Nuj0dAhP7ih8JV9/A1VmHr2Vv1tLKMvKJxt4%3D",
  "revised_prompt": "An image in the style of children's book illustration showing a South Asian male veterinarian gently using a stethoscope to listen to the heartbeat of an adorable and tiny baby otter. They are both inside a warmly lit clinic adorned with shelves filled with pet supplies and various animal charts. The otter lies comfortably on the check-up table, looking curiously at the vet, while the vet has a smile on his face showing care and professionalism."
}